import json
import traceback

# Assuming these are imported elsewhere in your code
import modules.Velociraptor.VelociraptorScript
from pyvelociraptor import api_pb2
from pyvelociraptor import api_pb2_grpc

def convert_yara_rules_to_string(yara_rules_dict, logger):
    """
    Converts a dictionary of YARA rules to a string format that can be used in Velociraptor.
    
    Args:
        yara_rules_dict (dict): Dictionary containing YARA rules keyed by CVE.
        logger: Logger object for logging messages.
    
    Returns:
        str: YARA rules in string format.
    """
    try:
        logger.info("Converting YARA rules to string format")
        yara_rules_text = ""
        
        # Process each CVE and its associated rules
        for cve_id, rules in yara_rules_dict.items():
            for rule_obj in rules:
                # Use provided rule name or default to "Rule_<CVE_ID>"
                rule_name = rule_obj.get("rule", f"Rule_{cve_id}")
                # Replace hyphens with underscores to ensure valid YARA rule names
                rule_name = rule_name.replace("-", "_")
                yara_rules_text += f"rule {rule_name} {{\n"
                
                # Add meta section
                meta = rule_obj.get("meta", {})
                if meta:
                    yara_rules_text += "  meta:\n"
                    for key, value in meta.items():
                        if isinstance(value, str):
                            yara_rules_text += f'    {key} = "{value}"\n'
                        else:
                            yara_rules_text += f"    {key} = {value}\n"
                
                # Add strings section
                strings = rule_obj.get("strings", [])
                if strings:
                    yara_rules_text += "  strings:\n"
                    for string_obj in strings:
                        string_id = string_obj.get("id", "$s")
                        string_value = string_obj.get("value", "")
                        # Escape quotes inside the string value
                        string_value = string_value.replace('"', '\\"')
                        yara_rules_text += f'    {string_id} = "{string_value}"\n'
                
                # Add condition section
                condition = rule_obj.get("condition", "all of them")
                yara_rules_text += "  condition:\n"
                yara_rules_text += f"    {condition}\n"
                
                # Close rule
                yara_rules_text += "}\n\n"
        
        logger.info(f"Successfully converted {len(yara_rules_dict)} CVE rules to YARA format")
        # Return the string with actual newlines
        return yara_rules_text.strip()
        
    except Exception as e:
        logger.error(f"Error converting YARA rules to string: {str(e)}")
        logger.error(traceback.format_exc())
        return ""



def format_arguments(params):
    """
    Format artifact parameters for use in Velociraptor query.
    
    Args:
        params (dict): Parameters to format
        
    Returns:
        str: Formatted parameters string
    """
    args = []
    for key, value in params.items():
        if isinstance(value, str):
            # Escape single quotes in string values
            escaped_value = value.replace("'", "\\'")
            args.append(f"{key}='{escaped_value}'")
        elif isinstance(value, bool):
            args.append(f"{key}={'TRUE' if value else 'FALSE'}")
        else:
            args.append(f"{key}={value}")
    
    return ", ".join(args)

def run_hunt(query, channel, stub, logger):
    """
    Execute a hunt and return the hunt ID.
    
    Args:
        query (str): VQL query to execute
        channel: gRPC channel
        stub: API stub
        logger: Logger object
        
    Returns:
        tuple: (hunt_id, status, error_message)
    """
    try:
        hunt_id = None
        request = api_pb2.VQLCollectorArgs(Query=[api_pb2.VQLRequest(VQL=query)])
        
        for response in stub.Query(request):
            logger.info(f"Raw response from Velociraptor: {response.Response}")
            if response.Response and response.Response != "[]":
                try:
                    parsed_json = json.loads(response.Response)
                    if parsed_json and len(parsed_json) > 0 and "HuntId" in parsed_json[0]:
                        hunt_id = parsed_json[0]["HuntId"]
                        if hunt_id:
                            logger.info(f"Hunt started with ID: {hunt_id}")
                            return hunt_id, "Running", ""
                except Exception as e:
                    error_msg = f"Error parsing response: {str(e)}"
                    logger.error(error_msg)
                    return "", "Failed", error_msg
        
        return "", "Failed", "No hunt ID returned"
        
    except Exception as e:
        error_msg = f"Error executing hunt: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        return "", "Failed", error_msg

def run_yara_file_scan(general_settings, yara_rules_dict, logger):
    """
    Launches Windows.Search.Yara artifact without waiting for results.
    
    Args:
        general_settings: Dictionary containing configuration settings
        yara_rules_dict: Dictionary containing YARA rules
        logger: Logger object for logging messages
    
    Returns:
        str: Hunt ID if successful, empty string otherwise
    """
    try:
        # Convert YARA rules to string format
        yara_rule_string = convert_yara_rules_to_string(yara_rules_dict, logger)
        if not yara_rule_string:
            logger.error("Failed to convert YARA rules to string format")
            return ""
            
        # Set artifact parameters
        artifact_name = "Windows.Search.Yara"
        
        # Set timeouts and resource limits
        timeout = general_settings.get("TimeForYaraScanInSeconds", 600)
        expire_time = general_settings.get("TimeForYaraScanInSeconds", 600)
        cpu_limit = general_settings.get("YaraCpuLimit", 50)
        max_bytes_uploaded = general_settings.get("YaraMaxBytesUploaded", 100000000)
        max_rows = general_settings.get("YaraMaxRows", 1000000)
        
        # Set YARA specific parameters
        name_regex = general_settings.get("YaraNameRegex", "(exe|txt|dll|php)$")
        also_upload = general_settings.get("YaraAlsoUpload", True)
        
        logger.info(f"Starting Windows.Search.Yara artifact with {timeout}s timeout")
        
        # Create artifact parameters
        params = {
            "nameRegex": name_regex,
            "yaraRule": yara_rule_string,
            "alsoUpload": "Y" if also_upload else "N",
            "numberOfHits": 1,
            "contextBytes": 0
        }
        
        # Format arguments according to your format
        arguments = format_arguments(params)
        
        # Create hunt query using your format
        spec = f"dict(`{artifact_name}`=dict({arguments}))"
        query = f"LET collection = hunt(description='API Hunt:{artifact_name}', artifacts='{artifact_name}', spec={spec}, expires=now() + {expire_time}, timeout={timeout}, max_rows={max_rows}, max_bytes={max_bytes_uploaded}, cpu_limit={cpu_limit}) SELECT HuntId FROM collection"
        
        logger.info(f"Running query: {query}")
        
        # Setup connection
        channel = modules.Velociraptor.VelociraptorScript.setup_connection(logger)
        if not channel:
            logger.error("Failed to establish connection")
            return ""
            
        stub = api_pb2_grpc.APIStub(channel)
        
        # Run the hunt
        hunt_id, status, error = run_hunt(query, channel, stub, logger)
        
        # Close channel
        channel.close()
        
        if status == "Failed":
            logger.error(f"Failed to run YARA file scan: {error}")
            return ""
            
        return hunt_id
        
    except Exception as e:
        error_msg = f"Error running Windows.Search.Yara artifact: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        return ""

def run_yara_process_scan(general_settings, yara_rules_dict, logger):
    """
    Launches Windows.Detection.Yara.Process artifact without waiting for results.
    
    Args:
        general_settings: Dictionary containing configuration settings
        yara_rules_dict: Dictionary containing YARA rules
        logger: Logger object for logging messages
    
    Returns:
        str: Hunt ID if successful, empty string otherwise
    """
    try:
        # Convert YARA rules to string format
        yara_rule_string = convert_yara_rules_to_string(yara_rules_dict, logger)
        if not yara_rule_string:
            logger.error("Failed to convert YARA rules to string format")
            return ""
            
        # Set artifact parameters
        artifact_name = "Windows.Detection.Yara.Process"
        
        # Set timeouts and resource limits
        timeout = general_settings.get("TimeForYaraScanInSeconds", 600)
        expire_time = general_settings.get("TimeForYaraScanInSeconds", 600)
        cpu_limit = general_settings.get("YaraCpuLimit", 50)
        max_bytes_uploaded = general_settings.get("YaraMaxBytesUploaded", 100000000)
        max_rows = general_settings.get("YaraMaxRows", 1000000)
        
        # Set YARA specific parameters
        process_regex = general_settings.get("YaraProcessRegex", ".")
        pid_regex = general_settings.get("YaraPidRegex", ".")
        upload_hits = general_settings.get("YaraUploadHits", True)
        
        logger.info(f"Starting Windows.Detection.Yara.Process artifact with {timeout}s timeout")
        
        # Create artifact parameters
        params = {
            "processRegex": process_regex,
            "pidRegex": pid_regex,
            "yaraRule": yara_rule_string,
            "uploadHits": "Y" if upload_hits else "N",
            "numberOfHits": 1,
            "contextBytes": 0
        }
        
        # Format arguments according to your format
        arguments = format_arguments(params)
        
        # Create hunt query using your format
        spec = f"dict(`{artifact_name}`=dict({arguments}))"
        query = f"LET collection = hunt(description='API Hunt:{artifact_name}', artifacts='{artifact_name}', spec={spec}, expires=now() + {expire_time}, timeout={timeout}, max_rows={max_rows}, max_bytes={max_bytes_uploaded}, cpu_limit={cpu_limit}) SELECT HuntId FROM collection"
        
        logger.info(f"Running query: {query}")
        
        # Setup connection
        channel = modules.Velociraptor.VelociraptorScript.setup_connection(logger)
        if not channel:
            logger.error("Failed to establish connection")
            return ""
            
        stub = api_pb2_grpc.APIStub(channel)
        
        # Run the hunt
        hunt_id, status, error = run_hunt(query, channel, stub, logger)
        
        # Close channel
        channel.close()
        
        if status == "Failed":
            logger.error(f"Failed to run YARA process scan: {error}")
            return ""
            
        return hunt_id
        
    except Exception as e:
        error_msg = f"Error running Windows.Detection.Yara.Process artifact: {str(e)}"
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        return ""

def run_yara_scans(general_settings, yara_rules_dict, logger):
    """
    Launches both file and process YARA scans without waiting for results.
    
    Args:
        general_settings: Dictionary containing configuration settings
        yara_rules_dict: Dictionary containing YARA rules
        logger: Logger object for logging messages
    
    Returns:
        dict: Dictionary containing hunt IDs for the launched scans
    """
    try:
        logger.info("Starting YARA scans for both files and processes")
        logger.info("yara object:" + str(yara_rules_dict))
        
        # Run file scan
        logger.info("Launching YARA file scan")
        file_hunt_id = run_yara_file_scan(general_settings, yara_rules_dict, logger)
        
        # Run process scan
        logger.info("Launching YARA process scan")
        process_hunt_id = run_yara_process_scan(general_settings, yara_rules_dict, logger)
        
        # Return hunt IDs
        hunt_ids = {
            "file_scan_hunt_id": file_hunt_id,
            "process_scan_hunt_id": process_hunt_id
        }
        
        logger.info(f"YARA scans launched successfully")
        logger.info(f"File scan hunt ID: {file_hunt_id}")
        logger.info(f"Process scan hunt ID: {process_hunt_id}")
        
        return hunt_ids
        
    except Exception as e:
        logger.error(f"Error launching YARA scans: {str(e)}")
        logger.error(traceback.format_exc())
        return {"file_scan_hunt_id": "", "process_scan_hunt_id": ""}