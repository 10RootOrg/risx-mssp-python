#!/usr/bin/env python3
"""
Module for handling requests to the Google Gemini API.
"""
import requests
import logging

class GeminiAPI:
    """Client for interacting with Google's Gemini API."""
    
    def __init__(self, api_settings, logger):
        """
        Initialize the Gemini API client.
        """
        self.api_key = api_settings.get("LLM_API_KEY")
        self.model_name = api_settings.get("MODEL_NAME", "gemini-1.5-pro")
        self.base_url = f"https://generativelanguage.googleapis.com/v1beta/models/{self.model_name}:generateContent"
        self.logger = logger
        
        if not self.api_key:
            error_msg = "API key is required for Gemini API"
            self.logger.error(error_msg)
            raise ValueError(error_msg)
            
        self.logger.info(f"Gemini API initialized with model: {self.model_name}")

    def send_request(self, system_prompt, user_prompt, temperature=0.7, max_tokens=15000):
        """
        Send a request to the Gemini API.
        
        Args:
            system_prompt: The system instructions
            user_prompt: The user's input message
            temperature: Sampling temperature (0.0 to 1.0)
            max_tokens: Maximum tokens to generate
            
        Returns:
            The text response from Gemini
        """
        url = f"{self.base_url}?key={self.api_key}"
        
        headers = {
            "Content-Type": "application/json"
        }
        
        # Ensure user_prompt is a string
        if not isinstance(user_prompt, str):
            self.logger.warning(f"Converting user_prompt from {type(user_prompt)} to string")
            user_prompt = str(user_prompt)
        
        # Gemini format: contents array with role and parts
        contents = [
            {
                "role": "system",
                "parts": [{"text": system_prompt}]
            },
            {
                "role": "user",
                "parts": [{"text": user_prompt}]
            }
        ]
        
        payload = {
            "contents": contents,
            "generationConfig": {
                "temperature": temperature,
                "maxOutputTokens": max_tokens,
            }
        }
        
        try:
            self.logger.debug(f"Sending request to Gemini API")
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            
            response_json = response.json()
            response_text = response_json["candidates"][0]["content"]["parts"][0]["text"]
            
            self.logger.debug("Successfully received response from Gemini API")
            return response_text
            
        except requests.exceptions.RequestException as e:
            error_msg = f"Error communicating with Gemini API: {str(e)}"
            if hasattr(e, 'response') and hasattr(e.response, 'text'):
                error_msg += f", Response: {e.response.text}"
            self.logger.error(error_msg)
            raise