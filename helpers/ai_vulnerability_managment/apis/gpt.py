#!/usr/bin/env python3
"""
Module for handling requests to the OpenAI ChatGPT API (GPT-5 only).
"""
import requests
import logging


class ChatGPTAPI:
    """Client for interacting with OpenAI's ChatGPT API (GPT-5 models only)."""
    
    def __init__(self, api_settings, logger):
        """
        Initialize the ChatGPT API client.
        """
        self.api_key = api_settings.get("LLM_API_KEY")
        self.model_name = api_settings.get("MODEL_NAME", "gpt-5")
        self.base_url = "https://api.openai.com/v1/chat/completions"
        self.logger = logger
        
        if not self.api_key:
            error_msg = "API key is required for ChatGPT API"
            self.logger.error(error_msg)
            raise ValueError(error_msg)
            
        self.logger.info(f"ChatGPT API initialized with model: {self.model_name}")

    def send_request(self, system_prompt, user_prompt, temperature=0.7, max_tokens=15000):
        """
        Send a request to the ChatGPT API (GPT-5 only).
        
        Args:
            system_prompt: The system instructions
            user_prompt: The user's input message
            temperature: Ignored for GPT-5 (uses default temperature=1)
            max_tokens: Maximum tokens to generate
            
        Returns:
            The text response from ChatGPT
        """
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        # Ensure user_prompt is a string
        if not isinstance(user_prompt, str):
            self.logger.warning(f"Converting user_prompt from {type(user_prompt)} to string")
            user_prompt = str(user_prompt)
        
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
        
        # GPT-5 specific payload
        payload = {
            "model": self.model_name,
            "messages": messages,
            "max_completion_tokens": max_tokens
        }
        
        try:
            self.logger.debug(f"Sending request to ChatGPT API with max_completion_tokens={max_tokens}")
            response = requests.post(self.base_url, headers=headers, json=payload)
            response.raise_for_status()
            
            response_json = response.json()
            response_text = response_json["choices"][0]["message"]["content"]
            
            # Check for insufficient token limit (GPT-5 specific issue)
            choice = response_json["choices"][0]
            finish_reason = choice.get("finish_reason", "")
            usage = response_json.get("usage", {})
            reasoning_tokens = usage.get("completion_tokens_details", {}).get("reasoning_tokens", 0)
            
            if finish_reason == "length" and len(response_text.strip()) == 0 and reasoning_tokens > 0:
                error_msg = (f"GPT-5 used all {max_tokens} tokens for internal reasoning but returned no content. "
                            f"Increase max_tokens (current: {max_tokens}, used for reasoning: {reasoning_tokens})")
                self.logger.error(error_msg)
                raise ValueError(error_msg)
            
            self.logger.debug("Successfully received response from ChatGPT API")
            return response_text
            
        except requests.exceptions.RequestException as e:
            error_msg = f"Error communicating with ChatGPT API: {str(e)}"
            if hasattr(e, 'response') and hasattr(e.response, 'text'):
                error_msg += f", Response: {e.response.text}"
            self.logger.error(error_msg)
            raise