import json
import os
import re
import yaml
import os
import re
import yaml
from collections import defaultdict

def create_nuclei_yaml_files(nuclei_rules, logger):
    """
    Creates individual YAML files for Nuclei rules extracted from CVE data.
    
    Args:
        nuclei_rules (dict): Dictionary containing Nuclei rules indexed by CVE ID
        logger: Logger object for logging messages
    """
    output_dir = os.path.join("modules", "Nuclei", "dependencies", "nuclei-templates")
    
    try:
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        
        # Counter for created files
        files_created = 0
        
        # Process each CVE and its associated rules
        for cve_id, rules in nuclei_rules.items():
            if not rules:
                continue
            
            # Process each rule for this CVE
            for i, rule in enumerate(rules):
                try:
                    # Determine the appropriate category based on this specific rule
                    template_dir = os.path.join(output_dir, "custom")
                    
                    # Create directory
                    try:
                        os.makedirs(template_dir, exist_ok=True)
                    except (PermissionError, OSError) as e:
                        if logger:
                            logger.error(f"Failed to create directory {template_dir}: {str(e)}")
                        continue
                    
                    # Extract basic information for filename
                    rule_id = rule.get("id", "")
                    name = rule.get("info", {}).get("name", "")
                    
                    # Create a clean filename
                    if rule_id:
                        # Use rule_id if available
                        filename = re.sub(r'[^\w\-\.]', '', re.sub(r'\s+', '_', rule_id))[:255]
                    elif name:
                        # Use name if no rule_id
                        filename = re.sub(r'[^\w\-\.]', '', re.sub(r'\s+', '_', name))[:255]
                    else:
                        # Use index if neither is available
                        filename = f"{cve_id}-rule-{i+1}"
                    
                    # Ensure filename has .yaml extension
                    if not filename.endswith('.yaml'):
                        filename = f"{filename}.yaml"
                    
                    # Create full file path
                    file_path = os.path.join(template_dir, filename)
                    
                    # Format the rule as YAML
                    yaml_content = yaml.safe_dump(rule, sort_keys=False, default_flow_style=False)
                    
                    # Write the YAML file
                    with open(file_path, 'w') as f:
                        f.write(yaml_content)
                    
                    files_created += 1
                    
                    if logger:
                        logger.info(f"Created Nuclei rule: {file_path}")
                    
                except Exception as e:
                    if logger:
                        logger.error(f"Error creating YAML for {cve_id}, rule index {i}: {str(e)}")
        
        # Log completion if logger is provided
        if logger:
            logger.info(f"Completed creation of {files_created} Nuclei YAML files")
    
    except Exception as e:
        if logger:
            logger.error(f"Unexpected error during YAML creation: {str(e)}")

def extract_rules(json_data, logger):
    """
    Extracts Sigma, Nuclei, and YARA rules from CVE data and saves them to predefined locations.
    If files already exist, loads them and merges new data to avoid duplications.
    
    Args:
        json_data (dict): The JSON data containing CVE information
        logger: Logger object for logging messages
        
    Returns:
        tuple: Three dictionaries containing Sigma, Nuclei, and YARA rules
    """
    sigma_rules = {}
    nuclei_rules = {}
    yara_rules = {}
    output_folder = "response_folder"
    
    logger.info("Starting extraction of rules")
    
    # Extract rules from each CVE
    for cve_id, cve_data in json_data.items():
        if "sigma_rules" in cve_data and cve_data["sigma_rules"]:
            sigma_rules[cve_id] = cve_data["sigma_rules"]
        
        if "nuclei_rules" in cve_data and cve_data["nuclei_rules"]:
            nuclei_rules[cve_id] = cve_data["nuclei_rules"]
        
        if "yara_rules" in cve_data and cve_data["yara_rules"]:
            yara_rules[cve_id] = cve_data["yara_rules"]
    
    #
    create_nuclei_yaml_files(nuclei_rules, logger)
    # Create output directory if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)
    
    # File paths
    sigma_path = f"{output_folder}/sigma_rules.json"
    nuclei_path = f"{output_folder}/nuclei_rules.json"
    yara_path = f"{output_folder}/yara_rules.json"
    
    # Load existing files and merge data
    try:
        # Process Sigma rules
        if os.path.exists(sigma_path):
            with open(sigma_path, 'r') as f:
                existing_sigma = json.load(f)
                logger.info(f"Loaded existing Sigma rules: {len(existing_sigma)} CVEs")
                for cve_id, rules in sigma_rules.items():
                    if cve_id in existing_sigma:
                        # Check for duplicates before appending
                        existing_ids = set()
                        for rule in existing_sigma[cve_id]:
                            rule_id = rule.get('id', '')
                            existing_ids.add(rule_id)
                        
                        for rule in rules:
                            rule_id = rule.get('id', '')
                            if rule_id and rule_id not in existing_ids:
                                existing_sigma[cve_id].append(rule)
                                existing_ids.add(rule_id)
                            elif not rule_id:  # If no ID exists, just append
                                existing_sigma[cve_id].append(rule)
                    else:
                        existing_sigma[cve_id] = rules
                sigma_rules = existing_sigma
        
        # Process Nuclei rules
        if os.path.exists(nuclei_path):
            with open(nuclei_path, 'r') as f:
                existing_nuclei = json.load(f)
                logger.info(f"Loaded existing Nuclei rules: {len(existing_nuclei)} CVEs")
                for cve_id, rules in nuclei_rules.items():
                    if cve_id in existing_nuclei:
                        # Check for duplicates before appending
                        existing_ids = set()
                        for rule in existing_nuclei[cve_id]:
                            rule_id = rule.get('id', '')
                            existing_ids.add(rule_id)
                        
                        for rule in rules:
                            rule_id = rule.get('id', '')
                            if rule_id and rule_id not in existing_ids:
                                existing_nuclei[cve_id].append(rule)
                                existing_ids.add(rule_id)
                            elif not rule_id:  # If no ID exists, just append
                                existing_nuclei[cve_id].append(rule)
                    else:
                        existing_nuclei[cve_id] = rules
                nuclei_rules = existing_nuclei
        
        # Process YARA rules
        if os.path.exists(yara_path):
            with open(yara_path, 'r') as f:
                existing_yara = json.load(f)
                logger.info(f"Loaded existing YARA rules: {len(existing_yara)} CVEs")
                for cve_id, rules in yara_rules.items():
                    if cve_id in existing_yara:
                        # Check for duplicates before appending
                        existing_rules = set()
                        for rule in existing_yara[cve_id]:
                            rule_name = rule.get('rule', '')
                            existing_rules.add(rule_name)
                        
                        for rule in rules:
                            rule_name = rule.get('rule', '')
                            if rule_name and rule_name not in existing_rules:
                                existing_yara[cve_id].append(rule)
                                existing_rules.add(rule_name)
                            elif not rule_name:  # If no name exists, just append
                                existing_yara[cve_id].append(rule)
                    else:
                        existing_yara[cve_id] = rules
                yara_rules = existing_yara
    
    except Exception as e:
        logger.error(f"Error loading existing rules: {e}")
    
    # Save the merged rules
    try:
        with open(sigma_path, 'w') as f:
            json.dump(sigma_rules, f, indent=2)
        
        with open(nuclei_path, 'w') as f:
            json.dump(nuclei_rules, f, indent=2)
        
        with open(yara_path, 'w') as f:
            json.dump(yara_rules, f, indent=2)
        
        logger.info(f"Rules saved to {output_folder}")
    except Exception as e:
        logger.error(f"Error saving rules: {e}")
    
    return sigma_rules, nuclei_rules, yara_rules