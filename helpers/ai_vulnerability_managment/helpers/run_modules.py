import threading
from concurrent.futures import ThreadPoolExecutor
from threading import Lock
import helpers.ai_vulnerability_managment.minimodules.run_yara
import helpers.ai_vulnerability_managment.minimodules.run_sigma
import helpers.ai_vulnerability_managment.minimodules.run_nuclei
def run_concurrent_scans(general_settings, config_data, yara_rules, sigma_rules, logger):
    # Dictionary to store results from all scans
    results = {
        "yara_results": None,
        "sigma_results": None,
        "nuclei_results": None
    }
    shared_lock = Lock()  # For thread-safe updates to shared data structures
    
    # Generate unique IDs for each scan
    import random
    yara_id = str(random.randint(10000000, 99999999))
    sigma_id = str(random.randint(10000000, 99999999))
    nuclei_id = str(random.randint(10000000, 99999999))
    
    # Generate current datetime in the format used in the config
    from datetime import datetime
    current_date = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    expire_date = datetime.now().strftime("%Y-%m-%d") + "T" + datetime.now().strftime("%H:%M:%S")
    
    # Wrapper functions to capture return values
    def run_yara_wrapper():
        result = helpers.ai_vulnerability_managment.minimodules.run_yara.run_yara_scans(
            general_settings, yara_rules, current_date, logger
        )
        with shared_lock:
            results["yara_results"] = result
            
            # Add to RequestStatus in config_data
            scan_entry = {
                "Error": "",
                "Status": "Complete",
                "UniqueID": yara_id,
                "Arguments": "",
                "StartDate": current_date,
                "ExpireDate": expire_date,
                "ModuleName": "Yara AI",
                "Population": config_data.get("ClientData", {}).get("Population", []),
                "ResponsePath": f"response_folder/response_ai_cve_management_yara_{current_date}.json",
                "TimeInterval": "",
                "SubModuleName": "",
                "LastIntervalDate": current_date,
                "ArtifactTimeOutInMinutes": ""
            }
            config_data["RequestStatus"].append(scan_entry)
    
    def run_sigma_wrapper():
        result = helpers.ai_vulnerability_managment.minimodules.run_sigma.run_sigma_scans(
            general_settings, sigma_rules, current_date, logger
        )
        with shared_lock:
            results["sigma_results"] = result
            
            # Add to RequestStatus in config_data
            scan_entry = {
                "Error": "",
                "Status": "Complete",
                "UniqueID": sigma_id,
                "Arguments": "",
                "StartDate": current_date,
                "ExpireDate": expire_date,
                "ModuleName": "Sigma AI",
                "Population": config_data.get("ClientData", {}).get("Population", []),
                "ResponsePath": f"response_folder/response_ai_cve_management_sigma_{current_date}.json",
                "TimeInterval": "",
                "SubModuleName": "",
                "LastIntervalDate": current_date,
                "ArtifactTimeOutInMinutes": ""
            }
            config_data["RequestStatus"].append(scan_entry)
    
    def run_nuclei_wrapper():
        result = helpers.ai_vulnerability_managment.minimodules.run_nuclei.run_nuclei_scan(
            config_data, current_date, logger
        )
        with shared_lock:
            results["nuclei_results"] = result
            
            # Add to RequestStatus in config_data
            scan_entry = {
                "Error": "",
                "Status": "Complete",
                "UniqueID": nuclei_id,
                "Arguments": {
                    "NucleiTags": "",
                    "NucleiWorkflow": "",
                    "NucleiArgumentFlags": [],
                    "NucleiExcludeSeverity": []
                },
                "StartDate": current_date,
                "ExpireDate": expire_date,
                "ModuleName": "Nuclei AI",
                "Population": config_data.get("ClientData", {}).get("Population", []),
                "ResponsePath": f"response_folder/response_ai_cve_management_nuclei_{current_date}.json",
                "TimeInterval": "",
                "SubModuleName": "",
                "LastIntervalDate": current_date,
                "ArtifactTimeOutInMinutes": ""
            }
            config_data["RequestStatus"].append(scan_entry)
    
    threads = []
    
    if general_settings["RunYara"] == "true":
        logger.info("Running Yara")
        yara_thread = threading.Thread(target=run_yara_wrapper)
        threads.append(yara_thread)
    
    if general_settings["RunSigma"] == "true":
        logger.info("Running Sigma")
        sigma_thread = threading.Thread(target=run_sigma_wrapper)
        threads.append(sigma_thread)
    
    if general_settings["RunNuclei"] == "true":
        logger.info("Running Nuclei")
        nuclei_thread = threading.Thread(target=run_nuclei_wrapper)
        threads.append(nuclei_thread)
    
    # Start all threads
    for thread in threads:
        thread.start()
    
    # Wait for all threads to complete
    for thread in threads:
        thread.join()
    
    # Return the collected results
    
    return config_data