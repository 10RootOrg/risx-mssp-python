import os
import logging
import shutil
from datetime import datetime

def setup_logger(logger_name, log_to_stdout=False, logging_level=logging.INFO, clean_format=False):
    """
    Set up a logger with file handling and optional stdout output.
    
    Args:
        logger_name (str): Name for the logger
        log_to_stdout (bool): If True, also log to stdout/console
        logging_level (int): Logging level (default: logging.INFO)
        clean_format (bool): If True, omits timestamp and log level from log messages
    
    Returns:
        logging.Logger: Configured logger
    """
    logs_dir = "logs"
    logging_path = os.path.join(logs_dir, logger_name)
    
    # Create logs directory if it doesn't exist
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)
    
    # Check if log file exists and is larger than 20MB
    if os.path.exists(logging_path) and os.path.getsize(logging_path) > 20 * 1024 * 1024:  # 20MB in bytes
        # Create archive directory if it doesn't exist
        archive_dir = os.path.join(logs_dir, "archived_logs")
        if not os.path.exists(archive_dir):
            os.makedirs(archive_dir)
        
        # Generate archive filename with current date and time
        timestamp = datetime.now().strftime("%Y%m%d%H")
        archive_filename = f"{logger_name}_{timestamp}"
        archive_path = os.path.join(archive_dir, archive_filename)
        
        # Copy the current log file to the archive
        shutil.copy2(logging_path, archive_path)
        
        # Clear the original log file
        open(logging_path, 'w').close()
    
    # Create a logger object with the provided name
    logger = logging.getLogger(logger_name)
    
    # Only set level and add handlers if not already configured
    if not logger.handlers:
        logger.setLevel(logging_level)
        
        # Create a file handler for logging to a file
        file_handler = logging.FileHandler(logging_path)
        file_handler.setLevel(logging_level)
        
        # Set formatter based on clean_format flag
        if clean_format:
            file_formatter = logging.Formatter('%(message)s')
        else:
            file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
        
        # Add stdout handler if requested
        if log_to_stdout:
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging_level)
            
            # Set console formatter based on clean_format flag
            if clean_format:
                console_formatter = logging.Formatter('%(message)s')
            else:
                console_formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
                
            console_handler.setFormatter(console_formatter)
            logger.addHandler(console_handler)
            
        # Prevent propagation to the root logger to avoid duplicate logs
        logger.propagate = False
    
    return logger