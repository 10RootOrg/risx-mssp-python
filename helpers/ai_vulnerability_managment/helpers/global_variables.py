import additionals.mysql_functions
import json
import additionals.funcs

def setup_global_variables(general_settings, config, logger):
    try:
        general_settings["LLM_API_KEY"] = config.get('ClientData', {}).get('API', {}).get('LLM', '')
        if not general_settings["LLM_API_KEY"]:
            logger.warning("LLM API key not found in configuration")
            
        general_settings["NVD_API_KEY"] = config.get('ClientData', {}).get('API', {}).get('NVD', '')
        if not general_settings["NVD_API_KEY"]:
            logger.warning("NVD API key not found in configuration")

        ai_config = config.get("Modules", {}).get("AIVulnerability", {}).get("Arguments", {})
            
        if ai_config.get("MODEL_NAME"):
            general_settings["MODEL_NAME"] = ai_config["MODEL_NAME"]
        if ai_config.get("MAX_TOKENS"):
            general_settings["MAX_TOKENS"] = ai_config["MAX_TOKENS"]
        if ai_config.get("MIN_CVSS_SCORE"):
            general_settings["MIN_CVSS_SCORE"] = ai_config["MIN_CVSS_SCORE"]
        if ai_config.get("PROMPT"):
            general_settings["PROMPT"] = ai_config["PROMPT"]
        if ai_config.get("PRODUCTS"):
            general_settings["PRODUCTS"] = ai_config["PRODUCTS"]
        if ai_config.get("FromTheFollowingTime"):
            general_settings["FromTheFollowingTime"] = ai_config["FromTheFollowingTime"]
        if ai_config.get("AutoProductsDetection"):
            general_settings["AutoProductsDetection"] = ai_config["AutoProductsDetection"]
        if ai_config.get("TimeForProductsDetectionInSeconds"):
            general_settings["TimeForProductsDetectionInSeconds"] = ai_config["TimeForProductsDetectionInSeconds"]
        if ai_config.get("RunNuclei"):
            general_settings["RunNuclei"] = ai_config["RunNuclei"]
        if ai_config.get("RunYara"):
            general_settings["RunYara"] = ai_config["RunYara"]
        if ai_config.get("RunSigma"):
            general_settings["RunSigma"] = ai_config["RunSigma"]
        if ai_config.get("VENDOR_NAME"):
            general_settings["VENDOR_NAME"] = ai_config["VENDOR_NAME"]
        if not (general_settings["PRODUCTS"]):
            logger.info("Give all data from the date provided")
        # Safely handle string replacements
        safe_min_cvss = str(general_settings["MIN_CVSS_SCORE"])
        safe_products = ", ".join(general_settings["PRODUCTS"]) if general_settings["PRODUCTS"] else "No products specified"
        
        general_settings["PROMPT"] = general_settings["PROMPT"].replace("min-cvss-score_to_check_in_prompt", safe_min_cvss)
        general_settings["PROMPT"] = general_settings["PROMPT"].replace("products_to_check_in_prompt", safe_products)
        general_settings["PROMPT"] = general_settings["PROMPT"].replace("from_time_to_check_in_prompt", general_settings["FromTheFollowingTime"])
        
        return general_settings
    except Exception as e:
        logger.error(f"Error in setup_global_variables: {str(e)}")
        # Set some defaults to prevent crashes
        if not general_settings["LLM_API_KEY"]:
            logger.critical("No LLM API key available!")
        if not general_settings["NVD_API_KEY"]:
            logger.critical("No NVD API key available!")
        if not general_settings["VENDOR_NAME"]:
            logger.critical("Vendor name not exists")


def get_config(logger):
    try:
        env_dict = additionals.funcs.read_env_file(logger)
    except Exception as e:
        logger.error(f"Error reading environment file: {str(e)}")
        env_dict = {}
        
    try:
        connection = additionals.mysql_functions.setup_mysql_connection(env_dict, logger)
        query_result = additionals.mysql_functions.execute_query(connection, "SELECT config FROM configjson LIMIT 1", logger)
        
        if query_result and query_result[0] and query_result[0][0]:
            config_data = json.loads(query_result[0][0])
            return config_data
        else:
            logger.error("No configuration data retrieved from database")
            config_data = {}
    except Exception as e:
        logger.error(f"Error connecting to database or retrieving config: {str(e)}")
        config_data = {}